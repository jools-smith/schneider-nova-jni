/****************************************************************************
 Copyright (c) 2008-2019 Flexera Software LLC.
 All Rights Reserved.
 This software has been provided pursuant to a License Agreement
 containing restrictions on its use.  This software contains
 valuable trade secrets and proprietary information of
 Flexera Software LLC and is protected by law.
 It may not be copied or distributed in any form or medium, disclosed
 to third parties, reverse engineered or used in any manner not
 provided for in said License Agreement except with the prior
 written authorization from Flexera Software LLC.
 *****************************************************************************/

/** @file
 *  Provides an interface to TRA.

	Refer to the getting started guide for TRA for usage of this API
 */

#ifndef tra_h_defined
#define tra_h_defined

#include <stddef.h>

#if defined( __cplusplus )
extern "C" {
#endif

/**
 * @defgroup tra_headers TRA
 * @{
 * @}
 */

/**
 * @addtogroup tra_headers
 * @{
 */

/**
 * @defgroup tra_headers1 TRA interface
 * @{
 * @}
 */

/**
 * @addtogroup tra_headers1
 * @{
 */

/** thread status. Any non 0 status should result in a call to tra_report_errors to retrieve further information
*/
#define TRA_OK		0

/** Opaque data structure for state information
*/
typedef struct tra_State tra_State;

/** Opaque data structure for the data returned in a callback.
*/
typedef struct tra_Data tra_Data;

/**
 *  Retrieves some usage statistics
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			This should be set to TRA_SV_STATS_ALIAS_x. (1-3)
 *  @return		 			A string of a Lua table with usage statistics
 *
 *  @note   To enable this functionality the options.debug.stats field must be set to true in the TRA gen file.
 */
const char * tra_get_stats( tra_State * T, int alias);

/**
 *  Retrieves a string
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @return	string 			The string as defined in the TRA gen file
 *
 *  @note   The behaviour of this function depends on the actions declared in the TRA gen file.
 *
 *  @note   The lifetime of this string can be shortened by calling tra_release_string. If this is not called the string is only released when the tra_close is called. If the same string is called repetitively then a cached version of the string is retuned.
 */
const char * tra_get_string( tra_State * T, int alias);

/**
 *  Retrieves a string
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @param	length			Pointer to an integer to receive the length of the string
 *  @return		 			The string as defined in the TRA gen file
 *
 *  @note   The behaviour of this function depends on the actions declared in the TRA gen file.
 *
 *  @note   This can be used to get binary data like Identity Data that was generated by the TRA gen file.

 *  @note   The lifetime of this string can be shortened by calling tra_release_string. If this is not called the string is only released when the tra_close is called. If the same string is called repetitively then a cached version of the string is retuned.
 */
const char * tra_get_lstring( tra_State * T, int alias, int * length);

/**
 *  Retrieves a wchar_t string
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @return		 			The string as defined in the TRA gen file
 *
 *  @note   The behaviour of this function depends on the actions declared in the TRA gen file.
 *
 *  @note   The lifetime of this string can be shortened by calling tra_release_string. If this is not called the string is only released when the tra_close is called. If the same string is called repetitively then a cached version of the string is retuned.
 */
const wchar_t * tra_get_wstring( tra_State * T, int alias);

/**
 *  Retrieves the user data from a callback function
 *
 *  @param	D				Pointer to tra_Data structure
 *  @return		 			The user data passed into the calling function
 */
void * tra_get_user_data( tra_Data * D );

/**
 *  Retrieves the named FNE user data from a callback function
 *
 *  @param	D				Pointer to tra_Data structure
 *  @param	metaname		The meta name of the expected TRA user data to be returned
 *  @return	void * 			The user data or NULL
 */
void * tra_get_named_user_data( tra_Data * D, const char * metaname);

/**
 *  Retrieves the named FNE user data from a callback function
 *
 *  @param	D				Pointer to tra_Data structure
 *  @param	meta_alias		The meta alias of the expected TRA user data to be returned
 *  @return	void * 			The user data or NULL
 */
void * tra_get_named_user_data_by_alias( tra_Data * D, int meta_alias);

/**
 *  Free up any memory allocated to hold the string returned by tra_get_string()
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   The alias identifies the string to be freed. If an alias of 0 is specified then the memory allocated to hold all strings previously returned by tra_get_string() will be freed. This function is called implicitly when tra_close() is called.
*/
int tra_release_string( tra_State * T, int alias);

/**
 *  Call a registered lua function from 'C' code
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the function
 *  @param	ud	 			The user data or NULL
 *  @param	p1 				An input integer value
 *  @param	p2 				A second input integer value
 *  @param	r	 			A pointer to an integer value to receive a returned vaue
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
*/
int tra_call( tra_State * T, int alias, void * ud, int p1, int p2, int * r );

/**
 *  Call a registered lua function from 'C' code
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the function
 *  @param	ud_alias		The generated alias of the user data
 *  @param	ud	 			The user data or NULL
 *  @param	p1 				An input integer value
 *  @param	p2 				A second input integer value
 *  @param	r	 			A pointer to an integer value to receive a returned vaue
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
*/
int tra_aliased_user_data_call( tra_State * T, int alias, int ud_alias, void * ud, int p1, int p2, int * r );

/**
 *  Set a value in the TRA object
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @param	value 			An input integer value
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   The number referred to is global to the TRA object.
*/
int tra_set_value( tra_State * T, int alias, int value );

/**
 *  Get a value in the TRA object
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @param	reply 			A pointer to an integer value to receive a returned vaue
 *  @return					TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   The number referred to is global to the TRA object.
*/
int tra_get_value( tra_State * T, int alias, int * reply );

/**
 *  During a callback calling this function gets a string passed to the function
 *
 *  @param	D				Pointer to tra_Data structure
 *  @return	char * 			A string passed to the callback from the lua code
 *
 *  @note   The string is ephemeral, so it is best to copy the string before calling any other TRA functions.
*/
const char * tra_get_string_parameter( tra_Data * D );

/**
 *  Call a registered snif function from 'C' code
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the string
 *  @param	ud	 			The user data or NULL
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   The behaviour of this function depends on the actions declared in the TRA gen file.
*/
int tra_if( tra_State * T, int alias, void * ud );

/**
 *  Create a new instance of a value
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	feature			The feature to be associated with this value
 *  @param	alias			The generated alias of the value
 *  @param	ud * 			Pointer to the objects instance
 *  @param	r	 			A pointer to an integer value to receive a key value
 *  @param	n	 			A pointer to an integer value to receive a key value
 *  @param	k	 			A pointer to an integer value to receive a key value
 *  @return					TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   This is meant to be used by TDT functions only.
*/
int tra_new( tra_State * T, int feature, int alias, void * ud, int * r, int * n, int * k );

/**
 *  Delete an instance of a value in the TRA object
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The generated alias of the value
 *  @return	int 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   This is meant to be used by TDT functions only.
*/
int tra_delete( tra_State * T, int alias );

/**
 *  Copy the value of the alias in the TRA object to the target alias
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	t				The generated target alias of the value
 *  @param	s				The generated source alias of the value
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   This is meant to be used by TDT functions only.
*/
int tra_copy( tra_State * T, int t, int s );

/**
 *  Reports the error to the log
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	error			The value returned from the failing function
 *
*/
void tra_report_errors( tra_State * T, int error );

/**
 *  Closes the TRA object and frees its resources
 *
 *  @param	T				Pointer to tra_State structure
 *
*/
void tra_close( tra_State * T );

/**
 *  Pushes a nil onto the stack when called from a callback function
 *
 *  @param	T				Pointer to tra_State structure
 *
*/
void tra_pushnil( tra_State * T );

/**
 *  Pushes a boolean onto the stack when called from a callback function
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	value			The value pushed onto the lua stack
 *
*/
void tra_pushboolean( tra_State * T, int value );

/**
 *  Pushes a boolean onto the stack when called from a callback function
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	value			The value pushed onto the lua stack
 *
*/
void tra_pushinteger( tra_State * T, int value );

/**
 *  Pushes a string onto the stack when called from a callback function
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	value			The value pushed onto the lua stack
 *
*/
void tra_pushstring( tra_State * T, const char * value );

/**
 *  Clears the stack when called from a callback function
 *
 *  @param	T				Pointer to tra_State structure
 *
*/
void tra_wipe_stack( tra_State * T );

/**
 *  When called from a callback function; recovers a string from the lua stack at the position indicated
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	idx				The index into the lua stack
 *  @param	length			Pointer to an integer to receive the length of the string
 *  @return		 			The string as defined in the TRA gen file
 *
 *  @note   The string is ephemeral, so it is best to copy the string before calling any other TRA functions.
*/
const char * tra_tolstring( tra_State * T, int idx, int * length);

/**
 *  Recover light user data from the TRA object
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	alias			The index into the lua stack
 *  @param	p1				An integer passed to the lua function
 *  @param	reply			Pointer to receive the light user data
 *  @return		 			TRA_OK on success. Failure indicates the call failed. Call tra_report_error for details.
 *
 *  @note   This function is reserved for flexera usage and may change without notice
*/
int tra_int_light_user_data_function( tra_State * T, int alias, int p1, void * reply );

/**
 *  When called from a callback function; recovers a string from the lua stack at the position indicated
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	idx				The index into the lua stack
 *  @return	void * 			The user data on the stack
*/
void * tra_touserdata( tra_State * T, int idx);

/**
 *  When called from a callback function; recovers a function from the lua stack at the position indicated
 *
 *  @param	T				Pointer to tra_State structure
 *  @param	idx				The index into the lua stack
 *  @return	void * 			The registered 'C' function
*/
void * tra_tocfunction( tra_State * T, int idx);

/** @} */ /* end of tra_headers1 group */
/** @} */ /* end of addtogroup tra_headers1 */
/** @} */ /* end of tra_headers group */
/** @} */ /* end of addtogroup tra_headers */

#if defined( __cplusplus )
}
#endif
#endif /* tra_h_defined */
